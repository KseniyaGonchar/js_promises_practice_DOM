{"version":3,"sources":["scripts/main.js"],"names":["promiseNumber","promiseName","result","split","join","toUpperCase","slice","message","type","notification","document","createElement","setAttribute","classList","textContent","body","appendChild","firstPromise","Promise","resolve","reject","querySelector","addEventListener","e","event","preventDefault","buttons","setTimeout","secondPromise","thirdPromise","then","catch","all"],"mappings":";AAAA,aAEA,IAAMA,EAAgB,SAACC,GACfC,IAAAA,EAASD,EAAYE,MAAM,KAAKC,KAAK,MAEpCF,OAAAA,EAAO,GAAGG,cAAgBH,EAAOI,MAAM,IAG1CC,EAAU,SAACC,EAAMP,GACfQ,IAAAA,EAAeC,SAASC,cAAc,OAIxCH,OAFJC,EAAaG,aAAa,UAAW,gBAExB,YAATJ,GACFC,EAAaI,UAAY,UACzBJ,EAAaK,YAAcd,EAAcC,GAAe,gBAEjDS,SAASK,KAAKC,YAAYP,IACf,UAATD,GACTC,EAAaI,UAAY,UACzBJ,EAAaK,YAAcd,EAAcC,GAAe,gBAEjDS,SAASK,KAAKC,YAAYP,SAJ5B,GAQHQ,EAAe,IAAIC,QAAQ,SAACC,EAASC,GAC5BV,SAASW,cAAc,QAE/BC,iBAAiB,YAAa,SAASC,GAGlCA,OAFRC,MAAMC,iBAEEF,EAAEG,SACH,KAAA,EACHP,OAKNQ,WAAWP,EAAQ,OAGfQ,EAAgB,IAAIV,QAAQ,SAACC,EAASC,GAC7BV,SAASW,cAAc,QAE/BC,iBAAiB,YAAa,SAASC,GAGlCA,OAFRC,MAAMC,iBAEEF,EAAEG,SACH,KAAA,EACA,KAAA,EACHP,SAMFU,EAAe,IAAIX,QAAQ,SAACC,EAASC,GAC5BV,SAASW,cAAc,QAE/BC,iBAAiB,YAAa,SAASC,GAGlCA,OAFRC,MAAMC,iBAEEF,EAAEG,SACH,KAAA,EACHP,SAMRF,EAAaa,KAAK,WAChBvB,EAAQ,UAAW,kBAClBwB,MAAM,WACPxB,EAAQ,QAAS,kBAGnBqB,EAAcE,KAAK,WACjBvB,EAAQ,UAAW,mBAGrBW,QAAQc,IAAI,CAACf,EAAcW,EAAeC,IAAeC,KAAK,WAC5DvB,EAAQ,UAAW","file":"main.365195e0.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst promiseNumber = (promiseName) => {\n  const result = promiseName.split('P').join(' p');\n\n  return result[0].toUpperCase() + result.slice(1);\n};\n\nconst message = (type, promiseName) => {\n  const notification = document.createElement('div');\n\n  notification.setAttribute('data-qa', 'notification');\n\n  if (type === 'success') {\n    notification.classList = 'success';\n    notification.textContent = promiseNumber(promiseName) + ' was resolved';\n\n    return document.body.appendChild(notification);\n  } else if (type === 'error') {\n    notification.classList = 'warning';\n    notification.textContent = promiseNumber(promiseName) + ' was rejected';\n\n    return document.body.appendChild(notification);\n  }\n};\n\nconst firstPromise = new Promise((resolve, reject) => {\n  const body = document.querySelector('body');\n\n  body.addEventListener('mousedown', function(e) {\n    event.preventDefault();\n\n    switch (e.buttons) {\n      case 1:\n        resolve();\n        break;\n    };\n  });\n\n  setTimeout(reject, 3000);\n});\n\nconst secondPromise = new Promise((resolve, reject) => {\n  const body = document.querySelector('body');\n\n  body.addEventListener('mousedown', function(e) {\n    event.preventDefault();\n\n    switch (e.buttons) {\n      case 1:\n      case 2:\n        resolve();\n        break;\n    };\n  });\n});\n\nconst thirdPromise = new Promise((resolve, reject) => {\n  const body = document.querySelector('body');\n\n  body.addEventListener('mousedown', function(e) {\n    event.preventDefault();\n\n    switch (e.buttons) {\n      case 2:\n        resolve();\n        break;\n    };\n  });\n});\n\nfirstPromise.then(() => {\n  message('success', 'firstPromise');\n}).catch(() => {\n  message('error', 'firstPromise');\n});\n\nsecondPromise.then(() => {\n  message('success', 'secondPromise');\n});\n\nPromise.all([firstPromise, secondPromise, thirdPromise]).then(() => {\n  message('success', 'thirdPromise');\n});\n"]}